// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BACKEND_MESSAGE_H_
#define FLATBUFFERS_GENERATED_BACKEND_MESSAGE_H_

#include "flatbuffers/flatbuffers.h"

namespace message {

struct create_wallet;

struct create_wallet FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_USER_ID = 4
  };
  int32_t user_id() const {
    return GetField<int32_t>(VT_USER_ID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_USER_ID) &&
           verifier.EndTable();
  }
};

struct create_walletBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_user_id(int32_t user_id) {
    fbb_.AddElement<int32_t>(create_wallet::VT_USER_ID, user_id, 0);
  }
  explicit create_walletBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  create_walletBuilder &operator=(const create_walletBuilder &);
  flatbuffers::Offset<create_wallet> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<create_wallet>(end);
    return o;
  }
};

inline flatbuffers::Offset<create_wallet> Createcreate_wallet(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t user_id = 0) {
  create_walletBuilder builder_(_fbb);
  builder_.add_user_id(user_id);
  return builder_.Finish();
}

}  // namespace message

#endif  // FLATBUFFERS_GENERATED_BACKEND_MESSAGE_H_
